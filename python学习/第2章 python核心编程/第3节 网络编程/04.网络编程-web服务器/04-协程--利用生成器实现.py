#-*- coding:utf-8 -*-
#author:YJ沛

'''协程
计算密集型：需要占用大量的cpu资源----多进程实现
io密集型（协程）：需要网络功能，大量的时间都在等待网络数据的到来 ----多线程，协程实现

协程，又称微线程，纤程。英文名Coroutine。

协程是啥
首先我们得知道协程是啥？协程其实可以认为是比线程更小的执行单元。 为啥说他是一个执行单元，因为他自带CPU上下文。这样只要在合适的时机，
我们可以把一个协程 切换到另一个协程。 只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。

通俗的理解：在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，
注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定

协程和线程差异
那么这个过程看起来比线程差不多。其实不然, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。
操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。
所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。

协程的问题
但是协程有一个问题，就是系统并不感知，所以操作系统不会帮你做切换。 那么谁来帮你做切换？让需要执行的协程更多的获得CPU时间才是问题的关键。

'''

import time


def A():
    while True:
        print("------ A -------")
        yield
        time.sleep(0.5)

def B(c):
    while True:
        print("------ B -------")
        next(c)
        #c.__next__()
        time.sleep(0.5)


if __name__ == "__main__":
    a = A()
    B(a)
