#-*- coding:utf-8 -*-

'''
位运算的介绍：

& ： 按位与 , 两者均为1则得1，否则为0
| ： 按位或 , 两者其中有一个为1则得1，均为0则为0
^ ： 按位异或 , 两者不相同为1，相同则为0
~ ： 按位取反
<< ：向左移 ，移动1位，相当乘以2
>> ：向右移 ，移动1位，相当除以2

'''
a = 8   #二进制表示：0000 1000
b = 5   #二进制表示：0000 0101

#向左移
a = 8
print (a<<1)    #结果：16

#向右移
a = 8
print (a>>1)    #结果：4

c = a&b
print(c)    #结果：0

c = a|b
print(c)    #结果：13

c = a^b
print(c)    #结果：13

c = ~a
print(c)    #结果：-9

'''
【为什么8取反变成了-9的说明】：
9的原码	==>	0000	1001	因为正数的原码=反码=补码，所以在	真正存储的时
候就是0000	1001
接下来进⾏对9的补码进⾏取反操作
进⾏取反==>	1111	0110	这就是对9	进⾏了取反之后的补码
既然已经知道了补码，那么接下来只要转换为	咱们⼈能识别的码型就可以，
因此按照规则	，把这个1111	0110	这个补码	转换为原码即可
符号位不变，其它位取反==>	1000	1001
然后+1	，得到原码	=======>1000	1010	这就是	-10

'''

